@article{Fairbanks,
abstract = {Imagine that you have some code written, but it has problems. The problems are small enough that you could imagine rewriting the code completely, and you must choose what do. You could do nothing (ignore it), make incremental changes (refactor it), or write new code from scratch (rewrite it). How do you choose? What factors do you consider? There’s already a lot of guidance. In fact, the very existence of refactoring on the list of choices is special because the idea of refactoring code wasn’t well formed until the 1990s. When you refactor code, you make changes that improve its structure but do not change its visible behavior, and our tools are increasingly good at supporting refactoring, helping us make sweeping changes safely.},
author = {Fairbanks, George},
issn = {0740-7459},
journal = {IEEE Software},
keywords = {Encoding ; Code refractoring ; Software engineering},
language = {eng},
number = {2},
pages = {133-136},
publisher = {IEEE},
title = {Ignore, Refactor, or Rewrite},
url = {https://ieeexplore.ieee.org/document/8648269},
volume = {36},
year = {2019},
}

@article{Murphy,
abstract = {Refactoring is widely practiced by developers, and considerable research and development effort has been invested in refactoring tools. However, little has been reported about the adoption of refactoring tools, and many assumptions about refactoring practice have little empirical support. In this paper, we examine refactoring tool usage and evaluate some of the assumptions made by other researchers. To measure tool usage, we randomly sampled code changes from four Eclipse and eight Mylyn developers and ascertained, for each refactoring, if it was performed manually or with tool support. We found that refactoring tools are seldom used: 11 percent by Eclipse developers and 9 percent by Mylyn developers. To understand refactoring practice at large, we drew from a variety of data sets spanning more than 39,000 developers, 240,000 tool-assisted refactorings, 2,500 developer hours, and 12,000 version control commits. Using these data, we cast doubt on several previously stated assumptions ...},
author = {Murphy-Hill, E and Parnin, C and Black, A. P},
address = {New York},
issn = {0098-5589},
journal = {IEEE Transactions on Software Engineering},
keywords = {floss refactoring ; Java ; root-canal refactoring ; Software tools ; Refactoring ; refactoring tools ; Computer programming ; Usage ; Innovations ; Control systems ; Mathematical optimization ; Simulation methods ; Software engineering ; Studies ; Analysis},
language = {eng},
number = {1},
pages = {5-18},
publisher = {IEEE},
title = {How We Refactor, and How We Know It},
url = {https://ieeexplore.ieee.org/document/6112738},
volume = {38},
year = {2012},
}

@article{Cunningham,
  title={The WyCash portfolio management system},
  author={Cunningham, Ward},
  journal={ACM SIGPLAN OOPS Messenger},
  volume={4},
  number={2},
  pages={29--30},
  year={1992},
  publisher={ACM New York, NY, USA}
}

@article{Allman,
author = {Allman, Eric},
title = {Managing Technical Debt},
year = {2012},
issue_date = {May 2012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {55},
number = {5},
issn = {0001-0782},
url = {https://doi.org/10.1145/2160718.2160733},
doi = {10.1145/2160718.2160733},
journal = {Commun. ACM},
month = may,
pages = {50–55},
numpages = {6}
}

@article{Fairley,
abstract = {Technical debt is incurred when development project tasks are deferred either unintentionally or deliberately. Detecting and mitigating this debt, including controlling it through risk management techniques, can help avoid or address common project pitfalls, such as late delivery, team burnout, and cost overruns.},
author = {Fairley, Richard E and Willshire, Mary Jane},
address = {LOS ALAMITOS},
copyright = {Copyright 2017 Elsevier B.V., All rights reserved.},
issn = {0018-9162},
journal = {Computer},
keywords = {risk management ; Process control ; Project management ; software lifecycle ; Product life cycle management ; software process models ; process measurement ; technical debt ; Cascading style sheets ; Software engineering ; project management ; software engineering ; COMPUTER SCIENCE, SOFTWARE ENGINEERING ; COMPUTER SCIENCE, HARDWARE & ARCHITECTURE ; Product life cycle management software ; Management ; Research ; Risk management ; Industrial project management},
language = {eng},
number = {5},
pages = {80-87},
publisher = {IEEE},
title = {Better Now Than Later: Managing Technical Debt in Systems Development},
url = {https://ieeexplore.ieee.org/document/7924273},
volume = {50},
year = {2017},
} 
 
@inproceedings{SPIIRGPU2018,
abstract = {Low-latency detection of gravitational waves (GWs) from compact stellar mergers is crucial to enable prompt followup electro-magnetic (EM) observations, as to probe different aspects of the merging process. The GW signal detection involves large computational efforts to search over the merger parameter space and Graphics Processing Unit (GPU) can play an important role to parallel the process. In this paper, Summed Parallel Infinite Impulse Response (SPIIR) GW detection pipeline is further optimized using recent GPU techniques to improve its throughput and reduce its latency. Two main computational bottlenecks have been studied: the SPIIR filtering and the coherent postprocessing which combines multiple GW detector outputs. In the filtering part, inefficient memory access is accelerated by exploiting temporal locality of input data, where the performance over previous implementation is improved by a factor of 2.5-3.5x on different GPUs. The post-processing part is improved by employing ...},
author = {Guo, Xiaoyang and Chu, Qi and Du, Zhihui and Went, Linqing},
copyright = {Copyright 2019 Elsevier B.V., All rights reserved.},
isbn = {9082797011},
issn = {2219-5491},
keywords = {Instruction sets ; Pipelines ; Graphics processing units ; Detectors ; Registers ; Optimization ; Signal to noise ratio},
language = {eng},
pages = {2638-2642},
publisher = {EURASIP},
title = {GPU-Optimised Low-Latency Online Search for Gravitational Waves from Binary Coalescences},
url = {https://ieeexplore.ieee.org/document/8553574},
volume = {2018-},
year = {2018},
}

@misc{ChuThesis,
author = {Q. Chu},
title = {Low-latency detection and localization of gravitational waves from compact binary coalescences},
year = {2017},
language = {eng},
}

@book{CLRS,
author = {Cormen, Thomas H. and Leiserson, Charles E. and Rivest, Ronald L. and Stein, Clifford},
address = {Cambridge, Mass},
booktitle = {Introduction to algorithms},
isbn = {0070131430},
keywords = {Computer programming},
language = {eng},
lccn = {89013027},
publisher = {MIT Press},
series = {MIT electrical engineering and computer science series.},
title = {Introduction to algorithms },
pages = {191--193},
edition = {3},
}

@misc{nvidia,
    title={GPUGems Chapter 46. Improved GPU Sorting},
    url={https://developer.nvidia.com/gpugems/GPUGems2/gpugems2_chapter46.html},
    journal={NVIDIA Developer},
    publisher={NVIDIA}
}

